LoadPackage("polycyclic");

r:=PolynomialRing(Rationals,["x1","x2","x3","x4","x5","x6","x7","x8"]);

monomials := [ r.1 * r.2 * r.3 * r.5,
    r.1 * r.2 * r.3 * r.4 * r.5,
    r.1 * r.2 * r.3 * r.6,
    r.4 * r.6,
    r.1 * r.4 * r.6,
    r.2 * r.4 * r.6,
    r.1 * r.2 * r.4 * r.6,
    r.3 * r.4 * r.6,
    r.1 * r.3 * r.4 * r.6,
    r.2 * r.3 * r.4 * r.6,
    r.1 * r.2 * r.3 * r.4 * r.6,
    r.1 * r.2 * r.5 * r.6,
    r.2 * r.3 * r.5 * r.6,
    r.1 * r.2 * r.3 * r.5 * r.6,
    r.4 * r.5 * r.6,
    r.1 * r.4 * r.5 * r.6,
    r.2 * r.4 * r.5 * r.6,
    r.1 * r.2 * r.4 * r.5 * r.6,
    r.3 * r.4 * r.5 * r.6,
    r.1 * r.3 * r.4 * r.5 * r.6,
    r.2 * r.3 * r.4 * r.5 * r.6,
    r.1 * r.2 * r.3 * r.4 * r.5 * r.6,
    r.4 * r.7,
    r.1 * r.4 * r.7,
    r.2 * r.4 * r.7,
    r.1 * r.2 * r.4 * r.7,
    r.3 * r.4 * r.7,
    r.1 * r.3 * r.4 * r.7,
    r.2 * r.3 * r.4 * r.7,
    r.1 * r.2 * r.3 * r.4 * r.7,
    r.5 * r.7,
    r.1 * r.5 * r.7,
    r.2 * r.5 * r.7,
    r.1 * r.2 * r.5 * r.7,
    r.3 * r.5 * r.7,
    r.1 * r.3 * r.5 * r.7,
    r.2 * r.3 * r.5 * r.7,
    r.1 * r.2 * r.3 * r.5 * r.7,
    r.4 * r.5 * r.7,
    r.1 * r.4 * r.5 * r.7,
    r.2 * r.4 * r.5 * r.7,
    r.1 * r.2 * r.4 * r.5 * r.7,
    r.3 * r.4 * r.5 * r.7,
    r.1 * r.3 * r.4 * r.5 * r.7,
    r.2 * r.3 * r.4 * r.5 * r.7,
    r.1 * r.2 * r.3 * r.4 * r.5 * r.7,
    r.1 * r.2 * r.3 * r.6 * r.7,
    r.4 * r.6 * r.7,
    r.1 * r.4 * r.6 * r.7,
    r.2 * r.4 * r.6 * r.7,
    r.1 * r.2 * r.4 * r.6 * r.7,
    r.3 * r.4 * r.6 * r.7,
    r.1 * r.3 * r.4 * r.6 * r.7,
    r.2 * r.3 * r.4 * r.6 * r.7,
    r.1 * r.2 * r.3 * r.4 * r.6 * r.7,
    r.5 * r.6 * r.7,
    r.1 * r.5 * r.6 * r.7,
    r.2 * r.5 * r.6 * r.7,
    r.1 * r.2 * r.5 * r.6 * r.7,
    r.3 * r.5 * r.6 * r.7,
    r.1 * r.3 * r.5 * r.6 * r.7,
    r.2 * r.3 * r.5 * r.6 * r.7,
    r.1 * r.2 * r.3 * r.5 * r.6 * r.7,
    r.4 * r.5 * r.6 * r.7,
    r.1 * r.4 * r.5 * r.6 * r.7,
    r.2 * r.4 * r.5 * r.6 * r.7,
    r.1 * r.2 * r.4 * r.5 * r.6 * r.7,
    r.3 * r.4 * r.5 * r.6 * r.7,
    r.1 * r.3 * r.4 * r.5 * r.6 * r.7,
    r.2 * r.3 * r.4 * r.5 * r.6 * r.7,
    r.1 * r.2 * r.3 * r.4 * r.5 * r.6 * r.7,
    r.1 * r.3 * r.8,
    r.1 * r.2 * r.3 * r.8,
    r.4 * r.8,
    r.1 * r.4 * r.8,
    r.2 * r.4 * r.8,
    r.1 * r.2 * r.4 * r.8,
    r.3 * r.4 * r.8,
    r.1 * r.3 * r.4 * r.8,
    r.2 * r.3 * r.4 * r.8,
    r.1 * r.2 * r.3 * r.4 * r.8,
    r.1 * r.3 * r.5 * r.8,
    r.1 * r.2 * r.3 * r.5 * r.8,
    r.4 * r.5 * r.8,
    r.1 * r.4 * r.5 * r.8,
    r.2 * r.4 * r.5 * r.8,
    r.1 * r.2 * r.4 * r.5 * r.8,
    r.3 * r.4 * r.5 * r.8,
    r.1 * r.3 * r.4 * r.5 * r.8,
    r.2 * r.3 * r.4 * r.5 * r.8,
    r.1 * r.2 * r.3 * r.4 * r.5 * r.8,
    r.3 * r.6 * r.8,
    r.1 * r.3 * r.6 * r.8,
    r.2 * r.3 * r.6 * r.8,
    r.1 * r.2 * r.3 * r.6 * r.8,
    r.4 * r.6 * r.8,
    r.1 * r.4 * r.6 * r.8,
    r.2 * r.4 * r.6 * r.8,
    r.1 * r.2 * r.4 * r.6 * r.8,
    r.3 * r.4 * r.6 * r.8,
    r.1 * r.3 * r.4 * r.6 * r.8,
    r.2 * r.3 * r.4 * r.6 * r.8,
    r.1 * r.2 * r.3 * r.4 * r.6 * r.8,
    r.1 * r.2 * r.5 * r.6 * r.8,
    r.3 * r.5 * r.6 * r.8,
    r.1 * r.3 * r.5 * r.6 * r.8,
    r.2 * r.3 * r.5 * r.6 * r.8,
    r.1 * r.2 * r.3 * r.5 * r.6 * r.8,
    r.4 * r.5 * r.6 * r.8,
    r.1 * r.4 * r.5 * r.6 * r.8,
    r.2 * r.4 * r.5 * r.6 * r.8,
    r.1 * r.2 * r.4 * r.5 * r.6 * r.8,
    r.3 * r.4 * r.5 * r.6 * r.8,
    r.1 * r.3 * r.4 * r.5 * r.6 * r.8,
    r.2 * r.3 * r.4 * r.5 * r.6 * r.8,
    r.1 * r.2 * r.3 * r.4 * r.5 * r.6 * r.8,
    r.7 * r.8,
    r.1 * r.7 * r.8,
    r.2 * r.7 * r.8,
    r.1 * r.2 * r.7 * r.8,
    r.3 * r.7 * r.8,
    r.1 * r.3 * r.7 * r.8,
    r.2 * r.3 * r.7 * r.8,
    r.1 * r.2 * r.3 * r.7 * r.8,
    r.4 * r.7 * r.8,
    r.1 * r.4 * r.7 * r.8,
    r.2 * r.4 * r.7 * r.8,
    r.1 * r.2 * r.4 * r.7 * r.8,
    r.3 * r.4 * r.7 * r.8,
    r.1 * r.3 * r.4 * r.7 * r.8,
    r.2 * r.3 * r.4 * r.7 * r.8,
    r.1 * r.2 * r.3 * r.4 * r.7 * r.8,
    r.5 * r.7 * r.8,
    r.1 * r.5 * r.7 * r.8,
    r.2 * r.5 * r.7 * r.8,
    r.1 * r.2 * r.5 * r.7 * r.8,
    r.3 * r.5 * r.7 * r.8,
    r.1 * r.3 * r.5 * r.7 * r.8,
    r.2 * r.3 * r.5 * r.7 * r.8,
    r.1 * r.2 * r.3 * r.5 * r.7 * r.8,
    r.4 * r.5 * r.7 * r.8,
    r.1 * r.4 * r.5 * r.7 * r.8,
    r.2 * r.4 * r.5 * r.7 * r.8,
    r.1 * r.2 * r.4 * r.5 * r.7 * r.8,
    r.3 * r.4 * r.5 * r.7 * r.8,
    r.1 * r.3 * r.4 * r.5 * r.7 * r.8,
    r.2 * r.3 * r.4 * r.5 * r.7 * r.8,
    r.1 * r.2 * r.3 * r.4 * r.5 * r.7 * r.8,
    r.6 * r.7 * r.8,
    r.1 * r.6 * r.7 * r.8,
    r.2 * r.6 * r.7 * r.8,
    r.1 * r.2 * r.6 * r.7 * r.8,
    r.3 * r.6 * r.7 * r.8,
    r.1 * r.3 * r.6 * r.7 * r.8,
    r.2 * r.3 * r.6 * r.7 * r.8,
    r.1 * r.2 * r.3 * r.6 * r.7 * r.8,
    r.4 * r.6 * r.7 * r.8,
    r.1 * r.4 * r.6 * r.7 * r.8,
    r.2 * r.4 * r.6 * r.7 * r.8,
    r.1 * r.2 * r.4 * r.6 * r.7 * r.8,
    r.3 * r.4 * r.6 * r.7 * r.8,
    r.1 * r.3 * r.4 * r.6 * r.7 * r.8,
    r.2 * r.3 * r.4 * r.6 * r.7 * r.8,
    r.1 * r.2 * r.3 * r.4 * r.6 * r.7 * r.8,
    r.5 * r.6 * r.7 * r.8,
    r.1 * r.5 * r.6 * r.7 * r.8,
    r.2 * r.5 * r.6 * r.7 * r.8,
    r.1 * r.2 * r.5 * r.6 * r.7 * r.8,
    r.3 * r.5 * r.6 * r.7 * r.8,
    r.1 * r.3 * r.5 * r.6 * r.7 * r.8,
    r.2 * r.3 * r.5 * r.6 * r.7 * r.8,
    r.1 * r.2 * r.3 * r.5 * r.6 * r.7 * r.8,
    r.4 * r.5 * r.6 * r.7 * r.8,
    r.1 * r.4 * r.5 * r.6 * r.7 * r.8,
    r.2 * r.4 * r.5 * r.6 * r.7 * r.8,
    r.1 * r.2 * r.4 * r.5 * r.6 * r.7 * r.8,
    r.3 * r.4 * r.5 * r.6 * r.7 * r.8,
    r.1 * r.3 * r.4 * r.5 * r.6 * r.7 * r.8,
    r.2 * r.3 * r.4 * r.5 * r.6 * r.7 * r.8,
    r.1 * r.2 * r.3 * r.4 * r.5 * r.6 * r.7 * r.8];

# Create the ideal
I := Ideal(r, monomials);

# Output the ideal
Print(I, "\n");

#Compute Grobner basis
#Print(ReducedGrobnerBasis(I,MonomialLexOrdering()));

#It is this one!
gb:=[ r.7*r.8, r.5*r.7, r.4*r.8, r.4*r.7, r.4*r.6, r.3*r.6*r.8, r.2*r.3*r.5*r.6, 
  r.1*r.3*r.8, r.1*r.2*r.5*r.6, r.1*r.2*r.3*r.6, r.1*r.2*r.3*r.5 ];

J:=Ideal(r,gb);

Print(I=J);
